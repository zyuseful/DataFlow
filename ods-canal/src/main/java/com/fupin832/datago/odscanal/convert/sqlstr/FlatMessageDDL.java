package com.fupin832.datago.odscanal.convert.sqlstr;

import com.fupin832.datago.odscanal.pojo.FlatMessage;
import com.fupin832.datago.odscanal.tables.OdsConfigTable;
import com.fupin832.datago.odscanal.tables.OdsConfigTableManager;

/**
 * FlatMessageDDL 转换类
 *
 * @author zy
 * @date 2021/01/27
 */
public class FlatMessageDDL implements Ddl {
    StringBuffer sb = new StringBuffer();
    @Override
    public String alterSql(FlatMessage fmg, OdsConfigTableManager oct) {
        OdsConfigTable bySourceTableName = oct.findBySourceTableName(fmg.getTable());
        String sourceTableName = bySourceTableName.getSourceTableName();
//        String sinkTableName = bySourceTableName.getSinkTableNameIfNull();
        String sinkTableName = bySourceTableName.getSinkDBAndTableNameIfNull();

        String alterSql = fmg.getSql();
        alterSql = alterSql.replaceAll(sourceTableName,sinkTableName);
        return alterSql;
    }

    //TODO 待验证删除多表
    //{"data":null,"database":"gxs_ty","es":1596188732000,"id":7352,"isDdl":true,"mysqlType":null,"old":null,"pkNames":null,"sql":"DROP TABLE `gen_table` /* generated by server */","sqlType":null,"table":"gen_table","ts":1596188732759,"type":"ERASE"}s
    @Override
    public String dropTableSql(FlatMessage fmg, OdsConfigTableManager oct) {
        OdsConfigTable bySourceTableName = oct.findBySourceTableName(fmg.getTable());
        String sourceTableName = bySourceTableName.getSourceTableName();
//        String sinkTableName = bySourceTableName.getSinkTableNameIfNull();
        String sinkTableName = bySourceTableName.getSinkDBAndTableNameIfNull();

        String sql = fmg.getSql();
        int r1 = sql.indexOf("/*");
        if (r1 > 0) {
            sql = sql.substring(0, r1).trim();
            //DROP TABLE `zy_s_sys_role`
        }
        sql = sql.replaceAll(sourceTableName,sinkTableName);
        return sql;
    }

    //{"data":null,"database":"gxs_ty","es":1596423004000,"id":17333,"isDdl":true,"mysqlType":null,"old":null,"pkNames":null,"sql":"truncate TABLE `s_sys_role`","sqlType":null,"table":"s_sys_role","ts":1596423004838,"type":"TRUNCATE"}
    @Override
    public String truncateTableSql(FlatMessage fmg, OdsConfigTableManager oct) {
        String sql = fmg.getSql();
        OdsConfigTable bySourceTableName = oct.findBySourceTableName(fmg.getTable());
        String sourceTableName = bySourceTableName.getSourceTableName();
//        String sinkTableName = bySourceTableName.getSinkTableNameIfNull();
        String sinkTableName = bySourceTableName.getSinkDBAndTableNameIfNull();
        sql = sql.replace(sourceTableName, sinkTableName);
        return sql;
    }

    //{"data":null,"database":"gxs_ty","es":1596422041000,"id":17298,"isDdl":true,"mysqlType":null,"old":null,"pkNames":null,"sql":"CREATE TABLE `gxs_ty`.`s_sys_role`  (\n  `id` int(0) NOT NULL,\n  `vv` varchar(255) NULL,\n  PRIMARY KEY (`id`)\n)","sqlType":null,"table":"s_sys_role","ts":1596422041854,"type":"CREATE"}
    @Override
    public String createSql(FlatMessage fmg, OdsConfigTableManager oct) {
        sb.setLength(0);
        String createSql = fmg.getSql();

        OdsConfigTable bySourceTableName = oct.findBySourceTableName(fmg.getTable());
//        String sinkTableName = bySourceTableName.getSinkTableNameIfNull();
        String sinkTableName = bySourceTableName.getSinkDBAndTableNameIfNull();

        createSql = createSql.substring(createSql.indexOf("("));
        sb.append("create table ");
        sb.append(createSql);

        return sb.toString();
    }

}
